{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","AMDLoader","global","Environment","_detected","_isWindows","_isNode","_isElectronRenderer","_isWebWorker","Object","defineProperty","prototype","get","_detect","enumerable","configurable","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","isWindows","uri","decodeURI","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","console","error","moduleId","stack","neededBy","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","ignoreDuplicateModules","nodeModules","nodeCachedDataWriteDelay","onNodeCachedData","data","warn","path","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","isNode","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","_scriptLoader","_callbackMap","load","moduleManager","scriptSrc","errorback","isWebWorker","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","scriptCallbacks","triggerCallback","triggerErrorback","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getElementsByTagName","appendChild","_didInitialize","_didPatchNodeRequire","_init","_fs","_vm","_path","_crypto","_jsflags","argv","arg","_initNodeRequire","nodeCachedDataDir","getConfig","that","Module","_compile","content","replace","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","Script","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_processCachedData","opts","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","normalizedScriptSrc","normalize","vmScriptSrc","isElectronRenderer","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_loadAndEvalScript","call","getGlobalAMDRequireFunc","getGlobalAMDDefineFunc","basedir","hash","createHash","update","digest","basename","join","cachedDataRejected","_runSoon","unlink","cachedDataProduced","undefined","writeFile","minTimeout","timeout","ceil","random","setTimeout","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","r","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","Error","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","init","_nodeRequire_1","what","RequireFunc","DefineFunc","amd","jQuery","_requireFunc_config","arguments","doNotInitLoader"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = /** @class */ (function () {\n        function Environment() {\n            this._detected = false;\n            this._isWindows = false;\n            this._isNode = false;\n            this._isElectronRenderer = false;\n            this._isWebWorker = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isWindows\", {\n            get: function () {\n                this._detect();\n                return this._isWindows;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isNode\", {\n            get: function () {\n                this._detect();\n                return this._isNode;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isElectronRenderer\", {\n            get: function () {\n                this._detect();\n                return this._isElectronRenderer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isWebWorker\", {\n            get: function () {\n                this._detect();\n                return this._isWebWorker;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isWindows = Environment._isWindows();\n            this._isNode = (typeof module !== 'undefined' && !!module.exports);\n            this._isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n            this._isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEvent = /** @class */ (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = /** @class */ (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(1 /* LoaderAvailable */, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = /** @class */ (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n        return NullLoaderEventRecorder;\n    }());\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = /** @class */ (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri);\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return Utilities.startsWith(id, '===anonymous');\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        Utilities.NEXT_ANONYMOUS_ID = 1;\n        Utilities.PERFORMANCE_NOW_PROBED = false;\n        Utilities.HAS_PERFORMANCE_NOW = false;\n        return Utilities;\n    }());\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var ConfigurationOptionsUtil = /** @class */ (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                options.catchError = false;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (typeof options.nodeCachedDataWriteDelay !== 'number' || options.nodeCachedDataWriteDelay < 0) {\n                options.nodeCachedDataWriteDelay = 1000 * 7;\n            }\n            if (typeof options.onNodeCachedData !== 'function') {\n                options.onNodeCachedData = function (err, data) {\n                    if (!err) {\n                        // ignore\n                    }\n                    else if (err.errorCode === 'cachedDataRejected') {\n                        console.warn('Rejected cached data from file: ' + err.path);\n                    }\n                    else if (err.errorCode === 'unlink' || err.errorCode === 'writeFile') {\n                        console.error('Problems writing cached data file: ' + err.path);\n                        console.error(err.detail);\n                    }\n                    else {\n                        console.error(err);\n                    }\n                };\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = /** @class */ (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename && this._env.isNode) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this.options.nodeMain && this._env.isNode) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = /** @class */ (function () {\n        function OnlyOnceScriptLoader(env) {\n            this._env = env;\n            this._scriptLoader = null;\n            this._callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            if (!this._scriptLoader) {\n                this._scriptLoader = (this._env.isWebWorker\n                    ? new WorkerScriptLoader()\n                    : this._env.isNode\n                        ? new NodeScriptLoader(this._env)\n                        : new BrowserScriptLoader());\n            }\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this._callbackMap.hasOwnProperty(scriptSrc)) {\n                this._callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this._callbackMap[scriptSrc] = [scriptCallbacks];\n            this._scriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = /** @class */ (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = /** @class */ (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = /** @class */ (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n            // js-flags have an impact on cached data\n            this._jsflags = '';\n            for (var _i = 0, _a = process.argv; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                if (arg.indexOf('--js-flags=') === 0) {\n                    this._jsflags = arg;\n                    break;\n                }\n            }\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            var nodeCachedDataDir = moduleManager.getConfig().getOptionsLiteral().nodeCachedDataDir;\n            if (!nodeCachedDataDir || this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang\n                content = content.replace(/^#!.*/, '');\n                // create wrapper function\n                var wrapper = Module.wrap(content);\n                var cachedDataPath = that._getCachedDataPath(nodeCachedDataDir, filename);\n                var options = { filename: filename };\n                try {\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\n                }\n                catch (e) {\n                    options.produceCachedData = true;\n                }\n                var script = new that._vm.Script(wrapper, options);\n                var compileWrapper = script.runInThisContext(options);\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, AMDLoader.global, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                that._processCachedData(moduleManager, script, cachedDataPath);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\n                    var vmScriptSrc = normalizedScriptSrc;\n                    // Make the script src friendly towards electron\n                    if (_this._env.isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            // windows\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n                        }\n                        else {\n                            // nix\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\n                        }\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\n                    if (!opts.nodeCachedDataDir) {\n                        _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder);\n                        callback();\n                    }\n                    else {\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedDataDir, scriptSrc);\n                        _this._fs.readFile(cachedDataPath_1, function (err, cachedData) {\n                            // create script options\n                            var options = {\n                                filename: vmScriptSrc,\n                                produceCachedData: typeof cachedData === 'undefined',\n                                cachedData: cachedData\n                            };\n                            var script = _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder);\n                            callback();\n                            _this._processCachedData(moduleManager, script, cachedDataPath_1);\n                        });\n                    }\n                });\n            }\n        };\n        NodeScriptLoader.prototype._loadAndEvalScript = function (moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder) {\n            // create script, run script\n            recorder.record(31 /* NodeBeginEvaluatingScript */, scriptSrc);\n            var script = new this._vm.Script(contents, options);\n            var r = script.runInThisContext(options);\n            r.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), moduleManager.getGlobalAMDDefineFunc(), vmScriptSrc, this._path.dirname(scriptSrc));\n            // signal done\n            recorder.record(32 /* NodeEndEvaluatingScript */, scriptSrc);\n            return script;\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (basedir, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(this._jsflags, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, cachedDataPath) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // data rejected => delete cache file\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                    errorCode: 'cachedDataRejected',\n                    path: cachedDataPath\n                });\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.unlink(cachedDataPath, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                                errorCode: 'unlink',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n            else if (script.cachedDataProduced) {\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData(undefined, {\n                    path: cachedDataPath,\n                    length: script.cachedData.length\n                });\n                // data produced => write cache file\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                                errorCode: 'writeFile',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n        };\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\n            setTimeout(callback, timeout);\n        };\n        NodeScriptLoader._BOM = 0xFEFF;\n        return NodeScriptLoader;\n    }());\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env);\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = /** @class */ (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        ModuleIdResolver.ROOT = new ModuleIdResolver('');\n        return ModuleIdResolver;\n    }());\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = /** @class */ (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(21 /* BeginInvokeFactory */, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(22 /* EndInvokeFactory */, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                config.onError({\n                    errorCode: 'factory',\n                    moduleId: this.strId,\n                    detail: producedError\n                });\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = /** @class */ (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = /** @class */ (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n        RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n        RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n        return RegularDependency;\n    }());\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = /** @class */ (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = /** @class */ (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            return {\n                errorCode: 'load',\n                moduleId: strModuleId,\n                neededBy: neededBy,\n                detail: err\n            };\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                if (path !== null) {\n                    path.push(fromId);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            var scopedPackageRegex = /^@[^\\/]+\\/[^\\/]+$/; // matches @scope/package-name\n            if (this._env.isNode && (strModuleId.indexOf('/') === -1 || scopedPackageRegex.test(strModuleId))) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(10 /* BeginLoadingScript */, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(11 /* EndLoadingScriptOK */, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(12 /* EndLoadingScriptError */, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    module.exportsPassedIn = true;\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule && dependencyModule.isComplete()) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (this._hasDependencyPath(dependency.id, module.id)) {\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependency.id);\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                    // Break the cycle\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                // record inverse dependency\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                this._inverseDependencies2[dependency.id].push(module.id);\n                if (dependency instanceof PluginDependency) {\n                    var plugin = this._modules2[dependency.pluginId];\n                    if (plugin && plugin.isComplete()) {\n                        this._loadPluginDependency(plugin.exports, dependency);\n                        continue;\n                    }\n                    // Record dependency for when the plugin gets loaded\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                    if (!inversePluginDeps) {\n                        inversePluginDeps = [];\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                    }\n                    inversePluginDeps.push(dependency);\n                    this._loadModule(dependency.pluginId);\n                    continue;\n                }\n                this._loadModule(dependency.id);\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    dependenciesValues[i] = module.exports;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    dependenciesValues[i] = {\n                        id: module.strId,\n                        config: function () {\n                            return _this._config.getConfigForModule(module.strId);\n                        }\n                    };\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule) {\n                    dependenciesValues[i] = dependencyModule.exports;\n                    continue;\n                }\n                dependenciesValues[i] = null;\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var env = new AMDLoader.Environment();\n    var moduleManager = null;\n    var DefineFunc = function (id, dependencies, callback) {\n        if (typeof id !== 'string') {\n            callback = dependencies;\n            dependencies = id;\n            id = null;\n        }\n        if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n            callback = dependencies;\n            dependencies = null;\n        }\n        if (!dependencies) {\n            dependencies = ['require', 'exports', 'module'];\n        }\n        if (id) {\n            moduleManager.defineModule(id, dependencies, callback, null, null);\n        }\n        else {\n            moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n        }\n    };\n    DefineFunc.amd = {\n        jQuery: true\n    };\n    var _requireFunc_config = function (params, shouldOverwrite) {\n        if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n        moduleManager.configure(params, shouldOverwrite);\n    };\n    var RequireFunc = function () {\n        if (arguments.length === 1) {\n            if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                _requireFunc_config(arguments[0]);\n                return;\n            }\n            if (typeof arguments[0] === 'string') {\n                return moduleManager.synchronousRequire(arguments[0]);\n            }\n        }\n        if (arguments.length === 2 || arguments.length === 3) {\n            if (Array.isArray(arguments[0])) {\n                moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                return;\n            }\n        }\n        throw new Error('Unrecognized require call');\n    };\n    RequireFunc.config = _requireFunc_config;\n    RequireFunc.getConfig = function () {\n        return moduleManager.getConfig().getOptionsLiteral();\n    };\n    RequireFunc.reset = function () {\n        moduleManager = moduleManager.reset();\n    };\n    RequireFunc.getBuildInfo = function () {\n        return moduleManager.getBuildInfo();\n    };\n    RequireFunc.getStats = function () {\n        return moduleManager.getLoaderEvents();\n    };\n    RequireFunc.define = function () {\n        return DefineFunc.apply(null, arguments);\n    };\n    function init() {\n        if (typeof AMDLoader.global.require !== 'undefined' || typeof require !== 'undefined') {\n            var _nodeRequire_1 = (AMDLoader.global.require || require);\n            if (typeof _nodeRequire_1 === 'function' && typeof _nodeRequire_1.resolve === 'function') {\n                // re-expose node's require function\n                var nodeRequire = function (what) {\n                    moduleManager.getRecorder().record(33 /* NodeBeginNativeRequire */, what);\n                    try {\n                        return _nodeRequire_1(what);\n                    }\n                    finally {\n                        moduleManager.getRecorder().record(34 /* NodeEndNativeRequire */, what);\n                    }\n                };\n                AMDLoader.global.nodeRequire = nodeRequire;\n                RequireFunc.nodeRequire = nodeRequire;\n                RequireFunc.__$__nodeRequire = nodeRequire;\n            }\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            require = RequireFunc;\n        }\n        else {\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = DefineFunc;\n            }\n            AMDLoader.global.require = RequireFunc;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\n        moduleManager = new AMDLoader.ModuleManager(env, AMDLoader.createScriptLoader(env), DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        // The global variable require can configure the loader\n        if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n            RequireFunc.config(AMDLoader.global.require);\n        }\n        // This define is for the local closure defined in node in the case that the loader is concatenated\n        define = function () {\n            return DefineFunc.apply(null, arguments);\n        };\n        define.amd = DefineFunc.amd;\n        if (typeof doNotInitLoader === 'undefined') {\n            init();\n        }\n    }\n})(AMDLoader || (AMDLoader = {}));\n"]}